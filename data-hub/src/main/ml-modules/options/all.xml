<options xmlns="http://marklogic.com/appservices/search">
  <search-option>unfiltered</search-option>
  <page-length>10</page-length>

  <additional-query>
    <cts:collection-query xmlns:cts="http://marklogic.com/cts">
      <cts:uri>Entity</cts:uri>
    </cts:collection-query>
  </additional-query>

  <!-- Full-text search options -->
  <term apply="term">
    <empty apply="all-results"/>
    <!--
      Below some example options for full-text searches. Note that MarkLogic will
      toggle options automatically depending on caps, wildcards etc.
      See Usage Notes of http://docs.marklogic.com/cts:word-query for details.
      Also note that forcing stemmed searches will disable wildcarded searches.
    -->
    <!--
    <term-option>punctuation-insensitive</term-option>
    <term-option>stemmed</term-option>
    -->
  </term>

  <!-- Default grammer -->
  <grammar>
    <quotation>"</quotation>
    <implicit>
      <cts:and-query strength="20" xmlns:cts="http://marklogic.com/cts"/>
    </implicit>
    <starter strength="30" apply="grouping" delimiter=")">(</starter>
    <starter strength="40" apply="prefix" element="cts:not-query">-</starter>
    <joiner strength="10" apply="infix" element="cts:or-query" tokenize="word">OR</joiner>
    <joiner strength="20" apply="infix" element="cts:and-query" tokenize="word">AND</joiner>
    <joiner strength="30" apply="infix" element="cts:near-query" tokenize="word">NEAR</joiner>
    <joiner strength="30" apply="near2" consume="2" element="cts:near-query">NEAR/</joiner>
    <joiner strength="50" apply="constraint">:</joiner>
    <joiner strength="50" apply="constraint" compare="LT" tokenize="word">LT</joiner>
    <joiner strength="50" apply="constraint" compare="LE" tokenize="word">LE</joiner>
    <joiner strength="50" apply="constraint" compare="GT" tokenize="word">GT</joiner>
    <joiner strength="50" apply="constraint" compare="GE" tokenize="word">GE</joiner>
    <joiner strength="50" apply="constraint" compare="NE" tokenize="word">NE</joiner>
  </grammar>

  <!-- Default sort order. You can also associate states with sort orders to allow switching sort orders -->
  <sort-order direction="descending">
    <score/>
  </sort-order>

  <!-- Not used, but the default snippeting behavior if no state (see compact/detailed below) was specified -->
  <transform-results apply="snippet">
    <preferred-elements><element ns="" name="body"/></preferred-elements>
    <max-matches>1</max-matches>
    <max-snippet-chars>150</max-snippet-chars>
    <per-match-tokens>20</per-match-tokens>
  </transform-results>

  <return-query>1</return-query>

  <!-- This controls the snippet size toggle -->
  <operator name="results">
    <state name="compact">
      <transform-results apply="snippet">
        <preferred-elements><element ns="" name="body"/></preferred-elements>
        <max-matches>1</max-matches>
        <max-snippet-chars>150</max-snippet-chars>
        <per-match-tokens>20</per-match-tokens>
      </transform-results>
    </state>
    <state name="detailed">
      <transform-results apply="snippet">
        <preferred-elements><element ns="" name="body"/></preferred-elements>
        <max-matches>2</max-matches>
        <max-snippet-chars>400</max-snippet-chars>
        <per-match-tokens>30</per-match-tokens>
      </transform-results>
    </state>
  </operator>

  <operator name="sort">
    <state name="score">
      <sort-order>
        <score/>
      </sort-order>
    </state>
  </operator>

  <constraint name="Collection">
    <collection facet="true" />
  </constraint>

  <constraint name="City">
    <range type="xs:string" facet="true" collation="http://marklogic.com/collation/codepoint">
      <element ns="" name="city"/>
      <facet-option>limit=10</facet-option>
      <facet-option>frequency-order</facet-option>
      <facet-option>descending</facet-option>
    </range>
  </constraint>

  <constraint name="Language">
    <range type="xs:string" facet="true" collation="http://marklogic.com/collation/codepoint">
      <element ns="" name="language"/>
      <facet-option>limit=10</facet-option>
      <facet-option>frequency-order</facet-option>
      <facet-option>descending</facet-option>
    </range>
  </constraint>

  <constraint name="Rating">
    <range type="xs:string" facet="true" collation="http://marklogic.com/collation/codepoint">
      <element ns="" name="rating"/>
      <facet-option>limit=100</facet-option>
      <facet-option>frequency-order</facet-option>
      <facet-option>descending</facet-option>
    </range>
  </constraint>

  <constraint name="RentalRate">
    <range type="xs:decimal" facet="true">
      <element ns="" name="rental_rate"/>
      <bucket name="low" lt="2.0">Less than 2 bucks</bucket>
      <bucket name="medium" lt="4.0" ge="2.0">2 to 4 bucks</bucket>
      <bucket name="high" ge="4.0">More than 4 bucks</bucket>
    </range>
  </constraint>

  <!-- example suggestion-source below -->
  <!--
  <suggestion-source ref="myconstraint">
    <suggestion-option>frequency-order</suggestion-option>
    <suggestion-option>descending</suggestion-option>
    <suggestion-option>limit=10</suggestion-option>
  </suggestion-source>
  -->

  <!-- This will extract the person's name from the search.  This path is specific to the person data
       sample data set.  As of beta release, you may override this by editing the default search route
       config options used in middle-tier/routes/api/index.js -->
  <extract-document-data selected="include">
    <extract-path>/name</extract-path>
  </extract-document-data>

</options>
