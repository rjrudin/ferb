plugins {
	id "java"
	id "net.saliman.properties" version "1.5.1"
	id "com.marklogic.ml-data-hub" version "5.0.2"
}

repositories {
	jcenter()
	maven { url "http://developer.marklogic.com/maven2/" }
}

configurations {
	mlcp
}

dependencies {
	compile "com.marklogic:marklogic-client-api:4.2.0"

	mlcp "com.marklogic:mlcp:9.0.9"
	mlcp files("mlcp-lib")
}

jar {
	manifest {
		attributes "Main-Class": "org.example.CustomerGenerator"
	}
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task ingestReferenceData(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	port = Integer.parseInt(mlStagingPort)
	input_file_path = "data/ReferenceData"
	input_file_type = "delimited_text"
	delimiter = "\t"
	generate_uri = true
	document_type = "json"
	output_uri_replace = ".*data,''"
	output_uri_suffix = ".json"
	output_permissions = "rest-reader,read,rest-writer,update"
	output_collections = "ReferenceData"
	transform_module = "/ferb/reference-data-transform.sjs"
	thread_count = 32
}

task ingestRawData(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	port = Integer.parseInt(mlStagingPort)
	input_file_path = "data/raw"
	input_file_type = "delimited_text"
	delimiter = "\t"
	generate_uri = true
	document_type = "json"
	output_uri_replace = ".*data,''"
	output_uri_suffix = ".json"
	output_permissions = "rest-reader,read,rest-writer,update"
	output_collections = "raw"
	transform_module = "/data-hub/5/transforms/mlcp-flow-transform.sjs"
	transform_param = "flow-name=flow1,step=1"
	thread_count = 32
}

task ingestGeneratedRawData(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	port = Integer.parseInt(mlStagingPort)
	input_file_path = "build/raw"
	input_file_type = "delimited_text"
	delimiter = ","
	generate_uri = true
	document_type = "json"
	output_uri_replace = ".*data,''"
	output_uri_suffix = ".json"
	output_permissions = "rest-reader,read,rest-writer,update"
	output_collections = "raw,generated"
	transform_module = "/data-hub/5/transforms/mlcp-flow-transform.sjs"
	transform_param = "flow-name=flow1,step=1"
	thread_count = 32
}

task createCustomers(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = "org.example.CustomerGenerator"
	args = [mlHost, mlUsername, mlPassword, customerLimit]
}

task batchCustomers(type: com.marklogic.gradle.task.RunFlowTask) {
	flowName = "flow1"
	steps = ["4"]
	threadCount = 32
	batchSize = 50
}

task nonBatchCustomers(type: com.marklogic.gradle.task.RunFlowTask) {
	flowName = "nonBatchFlow"
	steps = ["1"]
	threadCount = 32
	batchSize = 50
}

